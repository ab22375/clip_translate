[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "clip_translate"
version = "0.1.0"
description = "A modern Python project: clip_translate"
authors = [{ name = "ab" }]
requires-python = ">=3.12"
readme = "README.md"
license = { file = "LICENSE" }
keywords = []
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "click>=8.2.1",
    "googletrans>=4.0.2",
    "httpx>=0.28.1",
    "loguru>=0.7.3",
    "pydantic>=2.11.7",
    "pykakasi>=2.3.0",
    "pyperclip>=1.9.0",
    "pyqt6>=6.9.1",
    "python-dotenv>=1.1.1",
    "rich>=14.1.0",
    "typer>=0.16.1",
]

[project.urls]
Homepage = "https://github.com/ab/clip_translate"
Repository = "https://github.com/ab/clip_translate.git"
Issues = "https://github.com/ab/clip_translate/issues"

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-xdist>=3.0",
    "pytest-mock>=3.10",
    "coverage[toml]>=7.0",
    "pre-commit>=3.0",
    "ipython>=8.0",
    "ipdb>=0.13",
    "python-dotenv>=1.0",
    "mkdocs>=1.5",
    "mkdocs-material>=9.0",
    "pytest-benchmark>=4.0",
    "memory-profiler>=0.60",
]

[project.scripts]
clip_translate = "clip_translate.cli:main"
clip_translate_gui = "clip_translate.gui:main"

# --- Tool Configurations ---
[tool.ruff]
line-length = 88
target-version = "py312"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
strict_optional = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/conftest.py",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\\\bProtocol\\\\):",
    "@(abc\\\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ["py312"]
include = "\\.pyi?$"
extend-exclude = """
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
"""

[dependency-groups]
dev = [
    "black>=25.1.0",
    "coverage[toml]>=7.10.5",
    "ipdb>=0.13.13",
    "ipython>=9.4.0",
    "memory-profiler>=0.61.0",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.18",
    "mypy>=1.17.1",
    "pre-commit>=4.3.0",
    "pytest>=8.4.1",
    "pytest-benchmark>=5.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "pytest-xdist>=3.8.0",
    "ruff>=0.12.11",
]
